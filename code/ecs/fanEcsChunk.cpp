#include "ecs/fanEcsChunk.hpp"
#include "core/fanAssert.hpp"

namespace fan
{
	EcsChunkAllocator EcsChunk::s_allocator;

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::Create( void* ( *_cpyFunction )( void*, const void*, size_t ), const int _componentSize, const int _alignment )
	{
		m_cpyFunction = _cpyFunction;
		m_componentSize = _componentSize;		
		m_size = 0;
		m_buffer = s_allocator.Alloc();

		size_t space = EcsChunkAllocator::chunkSize;
		m_alignedBuffer = m_buffer;
		void* result = std::align( _alignment, _componentSize, m_alignedBuffer, space );
		fanAssert( result != nullptr );
		fanAssert( result == m_alignedBuffer );
		(void)result;

		m_capacity = int( space / _componentSize );
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::Destroy()
	{
		s_allocator.Free( m_buffer );
		m_buffer = nullptr;
		m_alignedBuffer = nullptr;
	}

	//================================================================================================================================
	//================================================================================================================================
	bool EcsChunk::Empty() const		{ return m_size == 0; }
	bool EcsChunk::Full() const			{ return m_size == m_capacity; }
	int	 EcsChunk::Size() const			{ return m_size; }
	int	 EcsChunk::Capacity() const		{ return m_capacity; }

	//================================================================================================================================
	//================================================================================================================================
	void* EcsChunk::At( const int _index )
	{
		fanAssert( _index < m_size );
		uint8_t* buffer = static_cast<uint8_t*>( m_alignedBuffer );
		return &buffer[_index * m_componentSize];
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::Set( const int _index, void* _data )
	{
        fanAssert( _index < m_size );
		m_cpyFunction( At( _index ), _data, m_componentSize );
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::Remove( const int _index )
	{
        fanAssert( _index < m_size );
		// back swap
		if( m_size != 1 && _index != m_size - 1 )
		{
			Set( _index, At( m_size - 1 ) );
		}
		m_size--;
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::PushBack( void* _data )
	{
        fanAssert( m_size < m_capacity );
		const int index = m_size;
		m_size++;
		Set( index, _data );
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::PopBack()
	{
        fanAssert( m_size > 0 );
		m_size--;
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::EmplaceBack()
	{
        fanAssert( m_size < m_capacity );
		m_size++;
	}

	//================================================================================================================================
	//================================================================================================================================
	void EcsChunk::Clear()
	{
		m_size = 0;
	}
}