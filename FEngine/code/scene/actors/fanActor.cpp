#include "fanGlobalIncludes.h"
#include "scene/actors/fanActor.h"

#include "scene/fanGameobject.h"
#include "core/fanSignal.h"

namespace fan
{
	REGISTER_ABSTRACT_TYPE_INFO( Actor )

	Signal< Actor * > Actor::onActorAttach;
	Signal< Actor * > Actor::onActorDetach;

	//================================================================================================================================
	//================================================================================================================================
	void Actor::OnAttach() {
		onActorAttach.Emmit(this);
	}

	//================================================================================================================================
	//================================================================================================================================
	void Actor::OnDetach() {
		onActorDetach.Emmit(this);
	}

	//================================================================================================================================
	//================================================================================================================================
	void Actor::SetEnabled( const bool _enabled ) { 
		if ( m_isEnabled != _enabled ) {
			m_isEnabled = _enabled;
			if ( m_isEnabled ) {
				OnEnable();
			} else {
				OnDisable();
			}
		}
	}

	//================================================================================================================================
	//================================================================================================================================
	void Actor::OnGui() {
		Component::OnGui();
	}

	//================================================================================================================================
	//================================================================================================================================
	bool Actor::Load( const Json & /*_json*/ ) {
// 		if (!ReadSegmentHeader(_in, "isEnabled:")) { return false; }
// 		if (!ReadBool(_in, m_isEnabled)) { return false; }
		return true;
	}


	//================================================================================================================================
	//================================================================================================================================
	bool Actor::Save( Json & _json ) const {
		//SaveBool( jActor, "isEnabled", m_isEnabled );
		Component::Save( _json );
		return true;
	}
}