#include "fanGlobalIncludes.h"

#include "core/files/fanSerializedValues.h"

namespace fan {

	//================================================================================================================================
	//================================================================================================================================
	SerializedValues::SerializedValues() {
		m_jsonPath = "editorValues.json";
		std::ifstream inFile(m_jsonPath);
		if (inFile.good() == true) {
			inFile >> m_json;
		}
		inFile.close();
	}

	//================================================================================================================================
	//================================================================================================================================
	void SerializedValues::SaveValuesToDisk() {
		std::ofstream outFile(m_jsonPath);
		assert(outFile.is_open());
		outFile << m_json;
		outFile.close();
	}

	//================================================================================================================================
	//================================================================================================================================
	bool SerializedValues::GetVec3( const std::string & _key, btVector3 & _outVec3 ) {
		auto  it = m_json.find( _key );
		if ( it != m_json.end() ) {
			_outVec3[0] = ( *it )["x"];
			_outVec3[1] = ( *it )["y"];
			_outVec3[2] = ( *it )["z"];
			return true;
		} else {
			return false;
		}
	}

	//================================================================================================================================
	//================================================================================================================================
	void SerializedValues::SetVec3( const std::string & _key, btVector3 _vec3 ) {
		m_json[_key]["x"] = _vec3[0];
		m_json[_key]["y"] = _vec3[1];
		m_json[_key]["z"] = _vec3[2];
	}

	//================================================================================================================================
	//================================================================================================================================
	bool SerializedValues::GetColor( const std::string & _key, Color & _outColor ) {
		auto  it = m_json.find( _key );
		if ( it != m_json.end() ) {
			_outColor[0] = ( *it )["r"];
			_outColor[1] = ( *it )["g"];
			_outColor[2] = ( *it )["b"];
			_outColor[3] = ( *it )["a"];
			return true;
		} else {
			return false;
		}
	}

	//================================================================================================================================
	//================================================================================================================================
	void SerializedValues::SetColor( const std::string & _key, Color _color ) {
		m_json[_key]["r"] = _color[0];
		m_json[_key]["g"] = _color[1];
		m_json[_key]["b"] = _color[2];
		m_json[_key]["a"] = _color[3];
	}

}