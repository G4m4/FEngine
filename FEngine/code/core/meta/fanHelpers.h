#pragma once

namespace meta {
	//================================================================================================================================
	// Simple id
	//================================================================================================================================
	template< typename _Type >
	struct Id {
		using type = _Type;
	};

	//================================================================================================================================
	// List of size_t args
	//================================================================================================================================
	template< size_t ... _Args >
	struct SizeList : Id< SizeList< _Args... > > {};

	//================================================================================================================================
	// Range
	// given L>=0, generate sequence <0, ..., L-1>
	//================================================================================================================================
	template< size_t _N, size_t... _Range > struct RangeImpl;

	template< size_t... _Range >
	struct RangeImpl< 0, _Range...> : SizeList<_Range...> {};

	template< size_t _N, size_t... _Range >
	struct RangeImpl : RangeImpl< _N-1, _N-1, _Range...>{};

	template< size_t _N> struct Range : RangeImpl<_N - 1, _N - 1>{};

	//================================================================================================================================
	// choose N-th element in list <T...>
	//================================================================================================================================
	template<size_t _N, typename ... _List > struct Choose;

	template<typename _Head, typename ... _List>
	struct Choose<0, _Head, _List... > : Id<_Head> {};
	
	template<size_t _N, typename _Head, typename ... _List>
	struct Choose<_N, _Head, _List...> : Choose<_N-1, _List...> {};
}