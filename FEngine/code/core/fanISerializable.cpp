#include "fanGlobalIncludes.h"

#include "fanISerializable.h"

namespace fan {
	//================================================================================================================================
	//================================================================================================================================
	const std::string ISerializable::GetIndentation(const int _indentLevel) {
		std::stringstream ss;
		for (int indentIndex = 0; indentIndex < _indentLevel; indentIndex++) {
			ss << "    ";
		} 
		return ss.str();
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadEndToken(std::istream& _in) {
		std::string buffer;
		_in >> buffer;
		return buffer == "}";
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadStartToken(std::istream& _in) {
		std::string buffer;
		_in >> buffer;
		return buffer == "{";
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadSegmentHeader(std::istream& _in) {
		std::string buffer;
		_in >> buffer;
		return buffer[buffer.size() - 1] == ':';
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadSegmentHeader(std::istream& _in, const std::string& _expectedHeader) {
		std::string buffer;
		_in >> buffer;
		if (buffer == "") {
			return false;
		}
		return buffer[buffer.size() - 1] == ':' && buffer == _expectedHeader;
	}	

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadFloat(std::istream& _in, float & _outValue) {
		if (_in.eof()) { return false; }
		_in >> _outValue;
		return true;
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadFloat3(std::istream& _in, float * _outFloat3) {
		if (!ReadFloat(_in, _outFloat3[0])) { return false; }
		if (!ReadFloat(_in, _outFloat3[1])) { return false; }
		if (!ReadFloat(_in, _outFloat3[2])) { return false; }
		return true;
	}

	static bool ReadFloat3(std::istream& _in, float * _outValue);
	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadInteger(std::istream& _in, int & _outValue) {
		if (_in.eof()) { return false; }
		_in >> _outValue;
		return true;
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadUnsigned(std::istream& _in, uint32_t & _outValue) {
		if (_in.eof()) { return false; }
		_in >> _outValue;
		return true;
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadString(std::istream& _in, std::string & _outStr) {
		if (_in.eof()) { return false; }
		_in >> _outStr;
		return true;
	}

	//================================================================================================================================
	//================================================================================================================================
	bool ISerializable::ReadBool(std::istream& _in, bool & _outBool) {
		if (_in.eof()) { return false; }
		std::string str;
		_in >> str;
		if (str == "true") {_outBool = true;}
		else if (str == "false") { _outBool = false; }
		else { return false; }
		return true;
	}
}